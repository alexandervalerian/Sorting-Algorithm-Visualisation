{"version":3,"sources":["Menu.js","Slider.js","ItemBlock.js","Algorithms.js","App.js","serviceWorker.js","index.js"],"names":["SimpleMenu","props","React","useState","anchorEl","setAnchorEl","handleClose","value","changeAlgorithm","Button","startIcon","Icon","className","style","fontSize","aria-controls","aria-haspopup","onClick","event","currentTarget","variant","color","width","algorithm","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","useStyles","makeStyles","root","input","InputSlider","classes","setValue","Typography","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","disabled","onChange","newValue","aria-labelledby","onChangeCommitted","changeArrSize","Number","Input","margin","target","onBlur","inputProps","step","min","max","type","itemBlock","height","itemHeight","itemWidth","backgroundColor","blockColor","bubbleSort","arr","index","counter","isSorted","length","setItemStatus","this","setState","sorting","call","state","swapItems","setTimeout","speed","selectionSort","minIndex","insertionSort","itemBlockStatus","back","tmp","fill","quickSort","left","right","partition","quickSortWrapper","stateArr","JSON","parse","stringify","map","status","queueAnimation","mergeSort","leftHalf","splice","Math","floor","rightHalf","merge","mergeSortWrapper","defaultItems","analyzedItems","sortedItems","i","firstItemIndex","secondItemIndex","sortedArray","shift","animateArraySorting","minimum","unsortedArr","j","findMinimum","updatedArray","pivot","App","size","randomHeight","random","push","Item","handleClick","sort","a","b","itemCount","window","innerWidth","itemBlocks","itemStatus","setColor","ItemBlock","key","display","flex","justifyContent","Component","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.94764888.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Icon from \"@material-ui/core/Icon\";\n\nconst SimpleMenu = function(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = value => {\n    if (typeof value == \"string\") {\n      props.changeAlgorithm(value);\n    }\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <Button\n        startIcon={\n          <Icon className=\"fas fa-bars\" style={{ fontSize: \"16px\" }} />\n        }\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ width: \"220px\" }}\n      >\n        {props.algorithm || \"Choose Algorithm\"}\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={() => handleClose(\"Bubble Sort\")}>\n          Bubble Sort\n        </MenuItem>\n        <MenuItem onClick={() => handleClose(\"Selection Sort\")}>\n          Selection Sort\n        </MenuItem>\n        <MenuItem onClick={() => handleClose(\"Insertion Sort\")}>\n          Insertion Sort\n        </MenuItem>\n        <MenuItem onClick={() => handleClose(\"Quick Sort\")}>\n          Quick Sort\n        </MenuItem>\n        <MenuItem onClick={() => handleClose(\"Merge Sort\")}>\n          Merge sort\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default SimpleMenu;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250\n  },\n  input: {\n    width: 42\n  }\n});\n\nfunction InputSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(30);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = event => {\n    setValue(event.target.value === \"\" ? \"\" : Number(event.target.value));\n    props.changeArrSize(Number(event.target.value));\n  };\n\n  const handleSliderCommit = (event, value) => {\n    props.changeArrSize(Number(value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n      props.changeArrSize(0);\n    } else if (value > 100) {\n      setValue(100);\n      props.changeArrSize(100);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"input-slider\" gutterBottom>\n        Array size\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs>\n          <Slider\n            disabled={props.disabled}\n            value={typeof value === \"number\" ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            onChangeCommitted={handleSliderCommit}\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            disabled={props.disabled}\n            className={classes.input}\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 0,\n              max: 100,\n              type: \"number\",\n              \"aria-labelledby\": \"input-slider\"\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default InputSlider;\n","import React from \"react\";\n\nconst itemBlock = function(props) {\n  return (\n    <div\n      style={{\n        margin: \"0px 2px\",\n        height: props.itemHeight,\n        width: props.itemWidth,\n        backgroundColor: props.blockColor\n      }}\n    ></div>\n  );\n};\n\nexport default itemBlock;\n","const algorithm = {\n  bubbleSort: function (arr, index = 0, counter = 0, isSorted = false) {\n    if (index === arr.length - counter - 1) {\n      setItemStatus(arr, [], [], [index]);\n      if (isSorted) {\n        setItemStatus(arr, [], [], [], true);\n        this.setState({\n          arr: arr,\n          isSorted: true,\n          sorting: false\n        });\n      } else {\n        this.setState({\n            arr: arr,\n            isSorted: true\n          }, () =>\n          algorithm.bubbleSort.call(this, this.state.arr, 0, counter + 1, true)\n        );\n      }\n      return;\n    }\n    if (index < arr.length) {\n      if (arr[index].height > arr[index + 1].height) {\n        swapItems(arr, index, index + 1);\n        setItemStatus(arr, [index], [index + 1, index + 2]);\n        this.setState({\n            arr: arr\n          }, () =>\n          setTimeout(\n            () =>\n            algorithm.bubbleSort.call(\n              this,\n              this.state.arr,\n              index + 1,\n              counter,\n              false\n            ),\n            this.state.speed\n          )\n        );\n        return;\n      } else {\n        setItemStatus(arr, [index], [index + 1, index + 2]);\n        this.setState({\n            arr: arr\n          }, () =>\n          setTimeout(\n            () =>\n            algorithm.bubbleSort.call(\n              this,\n              this.state.arr,\n              index + 1,\n              counter\n            ),\n            this.state.speed\n          )\n        );\n        return;\n      }\n    }\n  },\n  // Planned optimization:\n  // 1) Move break condition to top of recursive function for better readability\n  // 2) Reduce amount of loops by one via skipping the first iteration\n  // 3) Encapsulate color highlighting and value swapping\n  selectionSort: function (\n    arr,\n    index = 0,\n    minIndex = 0,\n    counter = 0,\n    isSorted = false\n  ) {\n    // Check if every itemblock has been considered as current minimum value\n    if (index < arr.length) {\n      // Define new minimum, if current item that is being analyzed is smaller than the current minimum\n      // Change status of itemBlocks to highlight in respective color\n      if (arr[index].height <= arr[minIndex].height) {\n        setItemStatus(arr, [minIndex], [index, index + 1]);\n        minIndex = index;\n        this.setState({\n            arr: arr\n          }, () =>\n          setTimeout(\n            () =>\n            algorithm.selectionSort.call(\n              this,\n              this.state.arr,\n              index + 1,\n              minIndex,\n              counter,\n              false\n            ),\n            this.state.speed\n          )\n        );\n        // Move one item ahead, if current item that is being analyzed is not smaller than the current minimum\n        // Change status accordingly to use color highlighting\n      } else if (arr[index].height > arr[minIndex].height) {\n        setItemStatus(arr, [index], [index + 1]);\n        this.setState({\n            arr: arr\n          }, () =>\n          setTimeout(\n            () =>\n            algorithm.selectionSort.call(\n              this,\n              this.state.arr,\n              index + 1,\n              minIndex,\n              counter\n            ),\n            this.state.speed\n          )\n        );\n      }\n      // After going through all items to check for a new minimum, check if items need to be swapped to further sort the array\n      // Swap new minimum with current starting item of the loop - Otherwise, consider array as sorted and fill the itemBlockStatus accordingly for color highlighting.\n    } else {\n      if (isSorted) {\n        setItemStatus(arr, [], [], [], true);\n        this.setState({\n          arr: arr,\n          isSorted: true,\n          sorting: false\n        });\n      } else {\n        swapItems(arr, counter, minIndex);\n        setItemStatus(arr, [minIndex], [counter + 1], [counter]);\n        this.setState({\n            arr: arr\n          }, () =>\n          setTimeout(\n            () =>\n            algorithm.selectionSort.call(\n              this,\n              this.state.arr,\n              counter + 1,\n              counter + 1,\n              counter + 1,\n              true\n            ),\n            this.state.speed\n          )\n        );\n      }\n    }\n  },\n  insertionSort: function (arr, itemBlockStatus, index = 0, back = 0, counter = 0) {\n    // change code below this line\n    if (index < arr.length) {\n      if (back >= 0) {\n        if (arr[back] <= arr[back - 1]) {\n          let tmp = arr[back];\n          arr[back] = arr[back - 1];\n          arr[back - 1] = tmp;\n        } else if (arr[back] > arr[back - 1]) {\n          itemBlockStatus[back] = \"default\";\n          itemBlockStatus[back - 1] = \"default\";\n          itemBlockStatus[index] = \"analyzed\";\n          itemBlockStatus[index + 1] = \"analyzed\";\n          this.setState({\n              arr: arr,\n              itemBlockStatus: itemBlockStatus\n            },\n            () => setTimeout(() => algorithm.insertionSort.call(this, this.state.arr, this.state.itemBlockStatus, index + 1, index + 1, counter + 1), 30)\n          );\n          return;\n        }\n        itemBlockStatus[back + 1] = \"default\";\n        itemBlockStatus[back] = \"analyzed\";\n        itemBlockStatus[back - 1] = \"analyzed\"\n        this.setState({\n            arr: arr,\n            itemBlockStatus: itemBlockStatus\n          },\n          () => setTimeout(() => algorithm.insertionSort.call(this, this.state.arr, this.state.itemBlockStatus, index, back - 1, counter), 30)\n        );\n      } else {\n        itemBlockStatus[back + 1] = \"default\";\n        itemBlockStatus[index] = \"analyzed\";\n        itemBlockStatus[index + 1] = \"analyzed\";\n        this.setState({\n            arr: arr,\n            itemBlockStatus: itemBlockStatus\n          },\n          () => setTimeout(() => algorithm.insertionSort.call(this, this.state.arr, this.state.itemBlockStatus, index + 1, index + 1, counter + 1), 30)\n        );\n      }\n    } else {\n      this.setState({\n        isSorted: true,\n        itemBlockStatus: itemBlockStatus.fill(\"sorted\")\n      });\n    }\n    return arr;\n  },\n  quickSort: function (arr, left, right) {\n    if (arr.length > 1) {\n      let index = partition.call(this, arr, left, right);\n      if (left < index - 1) {\n        algorithm.quickSort.call(this, arr, left, index - 1);\n      }\n      if (index < right) {\n        algorithm.quickSort.call(this, arr, index, right);\n      }\n    }\n    return arr;\n  },\n  quickSortWrapper: function (arr, left, right) {\n    algorithm.stateArr = JSON.parse(JSON.stringify(arr));\n    algorithm.quickSort.call(this, arr, left, right);\n    arr.map(item => (item.status = \"sorted\"));\n    queueAnimation.call(this, arr, true);\n    algorithm.counter = 1;\n  },\n  mergeSort: function (arr) {\n    if (arr.length <= 1) {\n      return arr;\n    }\n    let leftHalf = arr.splice(0, Math.floor(arr.length / 2));\n    let rightHalf = arr.splice(0, arr.length);\n    let left = algorithm.mergeSort.call(this, leftHalf);\n    let right = algorithm.mergeSort.call(this, rightHalf);\n    arr = merge.call(this, left, right);\n    return arr;\n  },\n  mergeSortWrapper: function (arr) {\n    algorithm.stateArr = JSON.parse(JSON.stringify(arr));\n    algorithm.mergeSort.call(this, arr);\n    algorithm.counter = 1;\n  },\n  counter: 1,\n  stateArr: []\n};\n\nfunction setItemStatus(\n  arr,\n  defaultItems = [],\n  analyzedItems = [],\n  sortedItems = [],\n  isSorted = false\n) {\n  for (let i = 0; i < defaultItems.length; i++) {\n    if (arr[defaultItems[i]] && arr[defaultItems[i]].status !== \"sorted\") {\n      arr[defaultItems[i]].status = \"default\";\n    }\n  }\n  for (let i = 0; i < analyzedItems.length; i++) {\n    if (arr[analyzedItems[i]] && arr[analyzedItems[i]].status !== \"sorted\") {\n      arr[analyzedItems[i]].status = \"analyzed\";\n    }\n  }\n  for (let i = 0; i < sortedItems.length; i++) {\n    if (arr[sortedItems[i]]) {\n      arr[sortedItems[i]].status = \"sorted\";\n    }\n  }\n  if (isSorted) {\n    arr.map(item => (item.status = \"sorted\"));\n  }\n  return arr;\n}\n\nfunction swapItems(arr, firstItemIndex, secondItemIndex) {\n  let tmp = arr[firstItemIndex];\n  arr[firstItemIndex] = arr[secondItemIndex];\n  arr[secondItemIndex] = tmp;\n  return arr;\n}\n\nfunction merge(left, right, sortedArray = []) {\n  while (left.length > 0 && right.length > 0) {\n    for (let i = 0; i < algorithm.stateArr.length; i++) {\n      if (\n        algorithm.stateArr[i].index === left[0].index ||\n        algorithm.stateArr[i].index === right[0].index\n      ) {\n        setItemStatus(algorithm.stateArr, [], [i]);\n      }\n    }\n    queueAnimation.call(this, algorithm.stateArr);\n    for (let i = 0; i < algorithm.stateArr.length; i++) {\n      if (\n        algorithm.stateArr[i].index === left[0].index ||\n        algorithm.stateArr[i].index === right[0].index\n      ) {\n        setItemStatus(algorithm.stateArr, [i], []);\n      }\n    }\n    queueAnimation.call(this, algorithm.stateArr);\n    algorithm.counter -= 1;\n    if (left[0].height < right[0].height) {\n      sortedArray = [...sortedArray, left.shift()];\n    } else {\n      sortedArray = [...sortedArray, right.shift()];\n    }\n  }\n  while (left.length > 0) {\n    for (let i = 0; i < algorithm.stateArr.length; i++) {\n      if (algorithm.stateArr[i].index === left[0].index) {\n        setItemStatus(algorithm.stateArr, [], [i]);\n      }\n    }\n    queueAnimation.call(this, algorithm.stateArr);\n    for (let i = 0; i < algorithm.stateArr.length; i++) {\n      if (algorithm.stateArr[i].index === left[0].index) {\n        setItemStatus(algorithm.stateArr, [i], []);\n      }\n    }\n    queueAnimation.call(this, algorithm.stateArr);\n    algorithm.counter -= 1;\n    sortedArray = [...sortedArray, left.shift()];\n  }\n  while (right.length > 0) {\n    for (let i = 0; i < algorithm.stateArr.length; i++) {\n      if (algorithm.stateArr[i].index === right[0].index) {\n        setItemStatus(algorithm.stateArr, [], [i]);\n      }\n    }\n    queueAnimation.call(this, algorithm.stateArr);\n    for (let i = 0; i < algorithm.stateArr.length; i++) {\n      if (algorithm.stateArr[i].index === right[0].index) {\n        setItemStatus(algorithm.stateArr, [i], []);\n      }\n    }\n    queueAnimation.call(this, algorithm.stateArr);\n    algorithm.counter -= 1;\n    sortedArray = [...sortedArray, right.shift()];\n  }\n  animateArraySorting.call(this, sortedArray);\n  if (algorithm.stateArr.length === sortedArray.length) {\n    setItemStatus(algorithm.stateArr, [], [], [], true);\n    queueAnimation.call(this, algorithm.stateArr, true);\n  }\n  return sortedArray;\n}\n\nfunction animateArraySorting(sortedArray) {\n  let minimum = findMinimum(algorithm.stateArr, sortedArray);\n  for (let i = 0; i < sortedArray.length; i++) {\n    algorithm.stateArr[minimum + i] = JSON.parse(\n      JSON.stringify(sortedArray[i])\n    );\n    queueAnimation.call(this, algorithm.stateArr);\n  }\n}\n\nfunction findMinimum(unsortedArr, sortedArray) {\n  for (let i = 0; i < unsortedArr.length; i++) {\n    for (let j = 0; j < sortedArray.length; j++) {\n      if (unsortedArr[i].index === sortedArray[j].index) {\n        return i;\n      }\n    }\n  }\n}\n\nfunction queueAnimation(updatedArray, isSorted) {\n  let arr = JSON.parse(JSON.stringify(updatedArray));\n  setTimeout(() => {\n    if (isSorted) {\n      this.setState({\n        arr: arr,\n        isSorted: true,\n        sorting: false\n      });\n    } else {\n      this.setState({\n        arr: arr\n      });\n    }\n  }, algorithm.counter * this.state.speed);\n  algorithm.counter += 1;\n}\n\n//Adapted from https://www.guru99.com/quicksort-in-javascript.html\nfunction partition(arr, left, right) {\n  let pivot = arr[Math.floor((right + left) / 2)].height;\n  let i = left;\n  let j = right;\n  while (i <= j) {\n    while (arr[i].height < pivot) {\n      setItemStatus(algorithm.stateArr, [], [i]);\n      queueAnimation.call(this, algorithm.stateArr);\n      setItemStatus(algorithm.stateArr, [i], []);\n      queueAnimation.call(this, algorithm.stateArr);\n      algorithm.counter -= 1;\n      i++;\n    }\n    while (arr[j].height > pivot) {\n      setItemStatus(algorithm.stateArr, [], [j]);\n      queueAnimation.call(this, algorithm.stateArr);\n      setItemStatus(algorithm.stateArr, [j], []);\n      queueAnimation.call(this, algorithm.stateArr);\n      algorithm.counter -= 1;\n      j--;\n    }\n    if (i <= j) {\n      swapItems(arr, i, j);\n      setItemStatus(algorithm.stateArr, [], [i, j]);\n      swapItems(algorithm.stateArr, i, j);\n      queueAnimation.call(this, algorithm.stateArr);\n      setItemStatus(algorithm.stateArr, [i, j], []);\n      queueAnimation.call(this, algorithm.stateArr);\n      //algorithm.counter -= 1;\n      i++;\n      j--;\n    }\n  }\n  return i;\n}\n\nexport default algorithm;","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Icon from \"@material-ui/core/Icon\";\nimport SimpleMenu from \"./Menu\";\nimport InputSlider from \"./Slider\";\nimport ItemBlock from \"./ItemBlock\";\nimport algorithm from \"./Algorithms\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      algorithm: \"\",\n      speed: 30,\n      isSorted: false,\n      sorting: false\n    };\n  }\n\n  componentDidMount() {\n    this.changeArrSize(30);\n  }\n\n  changeAlgorithm = algorithm => {\n    this.setState({ algorithm: algorithm });\n  };\n\n  changeArrSize = size => {\n    let arr = [];\n    for (let i = 0; i < size; i++) {\n      let randomHeight = calcRandomInIntervall(20, 400);\n      arr.push(new Item(randomHeight, \"default\", i));\n    }\n    this.setState({ arr: arr, isSorted: false });\n  };\n\n  handleClick = () => {\n    if (!this.state.isSorted && !this.state.sorting) {\n      let arr = JSON.parse(JSON.stringify(this.state.arr));\n      switch (this.state.algorithm) {\n        case \"Bubble Sort\":\n          this.setState({ sorting: true });\n          algorithm.bubbleSort.call(this, arr);\n          break;\n        case \"Selection Sort\":\n          this.setState({ sorting: true });\n          algorithm.selectionSort.call(this, arr);\n          break;\n        case \"Insertion Sort\":\n          algorithm.insertionSort.call(this, this.state.arr, this.state.itemBlockStatus);\n          break;\n        case \"Quick Sort\":\n          this.setState({ sorting: true });\n          algorithm.quickSortWrapper.call(this, arr, 0, arr.length - 1);\n          break;\n        case \"Merge Sort\":\n          this.setState({ sorting: true });\n          algorithm.mergeSortWrapper.call(this, arr);\n          break;\n        default:\n          break;\n      }\n    } else if (!this.state.isSorted && this.state.sorting) {\n    } else {\n      let arr = JSON.parse(JSON.stringify(this.state.arr));\n      arr.sort((a, b) => a.index - b.index);\n      arr.map(item => (item.status = \"default\"));\n      this.setState({ arr: arr, isSorted: false });\n    }\n  };\n\n  render() {\n    let { arr, algorithm } = this.state;\n    const itemWidth = calcItemWidth(arr.length);\n    let itemBlocks = arr.map((item, index) => {\n      let blockColor = setColor(item.status);\n      return (\n        <ItemBlock\n          key={index}\n          itemWidth={itemWidth}\n          itemHeight={item.height}\n          blockColor={blockColor}\n        />\n      );\n    });\n    return (\n      <div>\n        <header\n          style={{\n            display: \"flex\",\n            alignItems: \"center\"\n          }}\n        >\n          <div style={{ display: \"flex\", flex: 1, justifyContent: \"center\" }}>\n            <SimpleMenu\n              changeAlgorithm={this.changeAlgorithm}\n              algorithm={algorithm}\n            />\n          </div>\n          <div style={{ display: \"flex\", flex: 1, justifyContent: \"center\" }}>\n            <InputSlider\n              disabled={this.state.sorting}\n              changeArrSize={this.changeArrSize}\n            />\n          </div>\n          <div style={{ display: \"flex\", flex: 1, justifyContent: \"center\" }}>\n            <Button\n              startIcon={\n                this.state.isSorted && !this.state.sorting ? (\n                  <Icon className=\"fas fa-undo\" style={{ fontSize: \"16px\" }} />\n                ) : (\n                    <Icon\n                      className=\"fas fa-sort-amount-up\"\n                      style={{ fontSize: \"16px\" }}\n                    />\n                  )\n              }\n              //disabled={this.state.sorting}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClick}\n              style={{ width: \"130px\" }}\n            >\n              {this.state.sorting\n                ? \"SORTING...\"\n                : this.state.isSorted\n                  ? \"RESET\"\n                  : \"SORT\"}\n            </Button>\n          </div>\n        </header>\n        <div style={{ display: \"flex\" }}>{itemBlocks}</div>\n      </div>\n    );\n  }\n}\n\nclass Item {\n  constructor(height, status, index) {\n    this.height = height;\n    this.status = status;\n    this.index = index;\n  }\n}\n\nfunction calcRandomInIntervall(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction calcItemWidth(itemCount) {\n  return window.innerWidth / itemCount - 2;\n}\n\nfunction setColor(itemStatus) {\n  switch (itemStatus) {\n    case \"analyzed\":\n      return \"#F98334\";\n    case \"sorted\":\n      return \"#3ECF8E\";\n    default:\n      return \"#408AF8\";\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}